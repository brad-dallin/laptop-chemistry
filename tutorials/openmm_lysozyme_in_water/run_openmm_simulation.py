# This script was generated by OpenMM-Setup on 2025-02-25.

from openmm import *
from openmm.app import *
from openmm.unit import *

# Input Files

pdb = PDBFile('1aki-processed.pdb')
forcefield = ForceField('amber14-all.xml', 'amber14/tip3pfb.xml')

# System Configuration

nonbondedMethod = PME
nonbondedCutoff = 1.0*nanometers
ewaldErrorTolerance = 
constraints = HBonds
rigidWater = True
constraintTolerance = 

# Integration Options

dt = 0.002*picoseconds
temperature = 300*kelvin
friction = 1/picosecond
pressure = 1*atmospheres
barostatInterval = 25

# Simulation Options

steps = 10000
equilibrationSteps = 10000
platform = Platform.getPlatformByName('OpenCL')
platformProperties = {'Precision': 'single'}
xtcReporter = XTCReporter('1aki-openmm_trj.xtc', 1000)
dataReporter = StateDataReporter('1aki-openmm.dat', 100, totalSteps=steps,
    step=True, time=True, speed=True, progress=True, elapsedTime=True, remainingTime=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True, temperature=True, volume=True, density=True, separator='\t')
checkpointReporter = CheckpointReporter('1aki-openmm_checkpoint', 5000)

# Prepare the Simulation

print('Building system...')
topology = pdb.topology
positions = pdb.positions
system = forcefield.createSystem(topology, nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance)
system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
integrator = LangevinMiddleIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform, platformProperties)
simulation.context.setPositions(positions)

# Write XML serialized objects

with open("1aki-openmm_system.xml", mode="w") as file:
    file.write(XmlSerializer.serialize(system))
with open("1aki-openmm_integrator.xml", mode="w") as file:
    file.write(XmlSerializer.serialize(integrator))

# Minimize and Equilibrate

print('Performing energy minimization...')
simulation.minimizeEnergy()
print('Equilibrating...')
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(equilibrationSteps)

# Simulate

print('Simulating...')
simulation.reporters.append(xtcReporter)
simulation.reporters.append(dataReporter)
simulation.reporters.append(checkpointReporter)
simulation.currentStep = 0
simulation.step(steps)

# Write file with final simulation state

state = simulation.context.getState(getPositions=True, enforcePeriodicBox=system.usesPeriodicBoundaryConditions())
with open("1aki-openmm-out.pdb", mode="w") as file:
    PDBxFile.writeFile(simulation.topology, state.getPositions(), file)